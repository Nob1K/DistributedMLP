// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "coordinator.h"
#include "ML.hpp"
#include "gen-cpp/Compute.h"
#include <iostream>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class coordinatorHandler : virtual public coordinatorIf {
 public:
  int scheduling_policy;
  coordinatorHandler(int policy) {
    // Your initialization goes here
    this->scheduling_policy = policy;
  }

  double train(const std::string& dir, const int32_t rounds, const int32_t epochs, const int32_t h, const int32_t k, const double eta) {
    // Your implementation goes here
    printf("train\n");
  }

};

int main(int argc, char **argv) {
  if (argc < 3) {
    std::cout << "Usage: ./coordinator <port> <scheduling_policy>" << std::endl;
    return 1;
  }
    
  int port = std::stoi(argv[1]);
  int scheduling_policy = std::stoi(argv[2]);
    
  if (scheduling_policy != 1 && scheduling_policy != 2) {
    std::cerr << "Invalid scheduling policy. Use 1 for random or 2 for load-balancing." << std::endl;
    return 1;
  }

  ::std::shared_ptr<coordinatorHandler> handler(new coordinatorHandler(scheduling_policy));
  ::std::shared_ptr<TProcessor> processor(new coordinatorProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

