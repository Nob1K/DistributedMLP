/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "data_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




weights::~weights() noexcept {
}


void weights::__set_w(const std::vector<std::vector<double> > & val) {
  this->w = val;
}

void weights::__set_v(const std::vector<std::vector<double> > & val) {
  this->v = val;
}
std::ostream& operator<<(std::ostream& out, const weights& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t weights::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->w.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->w.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->w[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _etype8;
                xfer += iprot->readListBegin(_etype8, _size5);
                this->w[_i4].resize(_size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  xfer += iprot->readDouble(this->w[_i4][_i9]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->v.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              {
                this->v[_i14].clear();
                uint32_t _size15;
                ::apache::thrift::protocol::TType _etype18;
                xfer += iprot->readListBegin(_etype18, _size15);
                this->v[_i14].resize(_size15);
                uint32_t _i19;
                for (_i19 = 0; _i19 < _size15; ++_i19)
                {
                  xfer += iprot->readDouble(this->v[_i14][_i19]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t weights::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("weights");

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->w.size()));
    std::vector<std::vector<double> > ::const_iterator _iter20;
    for (_iter20 = this->w.begin(); _iter20 != this->w.end(); ++_iter20)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter20).size()));
        std::vector<double> ::const_iterator _iter21;
        for (_iter21 = (*_iter20).begin(); _iter21 != (*_iter20).end(); ++_iter21)
        {
          xfer += oprot->writeDouble((*_iter21));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->v.size()));
    std::vector<std::vector<double> > ::const_iterator _iter22;
    for (_iter22 = this->v.begin(); _iter22 != this->v.end(); ++_iter22)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter22).size()));
        std::vector<double> ::const_iterator _iter23;
        for (_iter23 = (*_iter22).begin(); _iter23 != (*_iter22).end(); ++_iter23)
        {
          xfer += oprot->writeDouble((*_iter23));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(weights &a, weights &b) {
  using ::std::swap;
  swap(a.w, b.w);
  swap(a.v, b.v);
  swap(a.__isset, b.__isset);
}

weights::weights(const weights& other24) {
  w = other24.w;
  v = other24.v;
  __isset = other24.__isset;
}
weights& weights::operator=(const weights& other25) {
  w = other25.w;
  v = other25.v;
  __isset = other25.__isset;
  return *this;
}
void weights::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "weights(";
  out << "w=" << to_string(w);
  out << ", " << "v=" << to_string(v);
  out << ")";
}


