/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_TYPES_H
#define data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class weights;

typedef struct _weights__isset {
  _weights__isset() : w(false), v(false) {}
  bool w :1;
  bool v :1;
} _weights__isset;

class weights : public virtual ::apache::thrift::TBase {
 public:

  weights(const weights&);
  weights& operator=(const weights&);
  weights() noexcept {
  }

  virtual ~weights() noexcept;
  std::vector<std::vector<double> >  w;
  std::vector<std::vector<double> >  v;

  _weights__isset __isset;

  void __set_w(const std::vector<std::vector<double> > & val);

  void __set_v(const std::vector<std::vector<double> > & val);

  bool operator == (const weights & rhs) const
  {
    if (!(w == rhs.w))
      return false;
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const weights &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const weights & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(weights &a, weights &b);

std::ostream& operator<<(std::ostream& out, const weights& obj);



#endif
